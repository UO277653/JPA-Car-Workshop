<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
        http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd" version="2.2">

	<!-- Client queries -->
	<named-query name="Client.findByDni">
		<query>
			select c
			from Client c
			where c.dni = ?1
		</query>
	</named-query>
	
	<named-query name="Client.findSponsoredByClient">
		<query>
			select r.recommended
			from Recommendation r
			where r.sponsor.id = ?1
		</query>
	</named-query>
	
	<named-query name="Client.findWithThreeUnusedWorkOrders">
		<query>
			select c
			from Client c
				join c.vehicles v
				join v.workOrders w
			where w.usedForVoucher = false
			group by c.id
			having (count(w) >= 3)
			
		</query>
	</named-query>
	
	
	<!-- Vehicle queries --> 
	<named-query name="Vehicle.findByPlate">
		<query>select v from Vehicle v where v.plateNumber = ?1</query>
	</named-query>

	<!-- WorkOrder queries --> 
	<named-query name="WorkOrder.findByIds">
		<query>select a from WorkOrder a where a.id in ?1</query>
	</named-query>
	
	<named-query name="WorkOrder.findNotInvoicedWorkOrdersByClientDni">
		<query>
			select w
			from WorkOrder w
				join w.vehicle v
				join v.client c
				
			where w.status !=
			uo.ri.cws.domain.WorkOrder.WorkOrderStatus.INVOICED
			
			and c.dni = ?1
		</query>
	</named-query>

	<!-- PaymentMean queries -->
	<named-query name="PaymentMean.findByInvoiceId">
		<query>
			select m 
			from Invoice f 
				join f.workOrders w 
				join w.vehicle.client c 
				join c.paymentMeans m 
			where f.id = ?1
		</query>
	</named-query>
	
	<named-query name="PaymentMean.findByClientId">
		<query>
			select p
			from Client c
			join c.paymentMeans p
			
			where c.id = ?1
		</query>
	</named-query>
	
	<named-query name="CreditCard.findByNumber">
		<query>
			select c
			from CreditCard c
			where c.number = ?1
		</query>
	</named-query>
	
	<named-query name="Voucher.findByCode">
		<query>
			select v
			from Voucher v
			where v.code = ?1
		</query>
	</named-query>
	
	<named-query name="Voucher.findByClientId">
		<query>
			select v
			from Voucher v
			join v.client c
			
			
			where c.id = ?1
		</query>
	</named-query>
	
	<!-- Mechanic queries -->
	<named-query name="Mechanic.findByDni">
		<query>
			select m 
			from Mechanic m 
			where m.dni = ?1
		</query>
	</named-query>

	<!-- Invoice queries -->
	<named-query name="Invoice.findByNumber">
		<query>select f from Invoice f where f.number = ?1</query>
	</named-query>
	
	<named-query name="Invoice.getNextInvoiceNumber">
		<query>select max(f.number) + 1 from Invoice f</query>
	</named-query>
	
	<named-query name="Invoice.findUnusedWithBono500">
		<query>
			select f 
			from Invoice f 
			where f.amount > 500 and f.usedForVoucher = false
		</query>
	</named-query>
	
<!-- 
	Use this format if your query has 
	numeric comparisons as the one in this example
	
	<named-query name="findItemsOnSaleByCategoryId">
		<query>
			<![CDATA[
			select i 
				from Item i join i.categories c
				where c.id = ?2
					and i.startDate <= ?1
					and i.endDate >= ?1 
			]]>
		</query>
	</named-query>
 -->		

</entity-mappings>